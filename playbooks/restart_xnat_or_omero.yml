---
- name: Ensure storage is mounted
  hosts: all
  become: true
  tasks:
    - name: Ensure storage is mounted
      when: external_storage_drive is defined
      block:
        - name: "Check if storage is mounted: {{ external_storage_drive }}"
          ansible.builtin.command: mountpoint {{ external_storage_drive }}
          register: check_mountpoint
          failed_when: false
          changed_when: false

        - name: Start autofs if storage is not mounted
          ansible.builtin.service:
            name: autofs
            state: started
          when: "'is not a mountpoint' in check_mountpoint.stdout"

        - name:
            Check that storage has been mounted correctly if it was previously
            not mounted
          ansible.builtin.command: mountpoint {{ external_storage_drive }}
          when: "'is not a mountpoint' in check_mountpoint.stdout"
          register: check_mountpoint_again
          failed_when: "'is not a mountpoint' in check_mountpoint_again.stdout"
          changed_when: "'is a mountpoint' in check_mountpoint_again.stdout"

- name: Ensure the database is available
  hosts: db
  become: true
  tasks:
    - name: "Ensure PostgreSQL is running: postgresql-{{ postgresql_version }}"
      ansible.builtin.service:
        name: "postgresql-{{ postgresql_version }}" # yamllint disable-line rule:quoted-strings
        state: restarted

- name: Ensure the application services are available
  hosts: omero,xnat
  become: true
  tasks:
    - name: Ensure services are running
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      loop: "{{ services_to_restart | default(['tomcat']) }}"

    - name:
        "Waiting for application to start - this could take several minutes: {{
        web_server.url }}"
      ansible.builtin.uri:
        url: "{{ web_server.url }}"
        method: GET
        validate_certs: "{{ ssl.validate_certs }}"
      register: _result
      until: _result.status == 200
      retries: 10
      delay: 30
