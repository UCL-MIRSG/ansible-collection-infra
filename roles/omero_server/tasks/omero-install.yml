---
# install/upgrade OMERO.server

- name: Is server symlink present
  become: true
  ansible.builtin.stat:
    path: "{{ omero_server_basedir }}/{{ omero_server_symlink }}"
  register: omero_server_symlink_st

- name: Is virtualenv present
  become: true
  ansible.builtin.stat:
    path: "{{ omero_server_virtualenv_basedir }}"
  register: omero_server_venv_st

# Is there an existing OMERO.server that uses the requested virtualenv?
- name: Does omero server match requested virtualenv
  ansible.builtin.set_fact:
    _omero_server_matches_virtualenv: >-
      {{
        omero_server_symlink_st.stat.exists and
        omero_server_venv_st.stat.exists
      }}

# Previously this used the output of 'omero version'
# Python modules are now decoupled so get the version from the folder name
- name: Get server version
  ansible.builtin.set_fact:
    omero_server_version: >-
      {{
        omero_server_symlink_st.stat.lnk_target | basename |
        regex_replace('OMERO.server-(.+)-ice3.+', '\1')
      }}
  when: _omero_server_matches_virtualenv

- name: Check omero version could be obtained
  ansible.builtin.assert:
    msg: >-
      OMERO.server found but unable to get version,
      you may have a corrupt installation
    that: >-
      not _omero_server_matches_virtualenv or
      (omero_server_version | default('') | length > 0)

# TODO: If server was started by systemd but stopped directly you may end up
# with a hanging process

# Check whether an upgrade is available since `omego upgrade` always
# restarts the server
- name: Get latest downloads url
  ansible.builtin.uri:
    url: https://downloads.openmicroscopy.org/latest/omero
    method: HEAD
  register: _omero_server_downloads_latest
  check_mode: false

# omego supports --release "latest" but not "present"
# It's easiest to lookup a concrete version and use this for all omego
# operations instead
- name: Get latest version
  ansible.builtin.set_fact:
    _omero_server_new_version: >
      "{{ (omero_server_release in ('latest', 'present')) |
      ternary(_omero_server_downloads_latest.url.strip('/').split('/')[-1],
      omero_server_release) }}"

- name: Check if an upgrade is required
  block:
    - name: Check upgrade
      ansible.builtin.set_fact:
        # If _omero_server_new_version does not begin with a number assume
        # it's a custom build, always upgrade
        # If we're switching from a non-venv to a venv treat it as an upgrade
        _omero_server_update_needed: >-
          {{
            not _omero_server_matches_virtualenv or
            not (_omero_server_new_version | regex_search('^[0-9]')) or
            (
              (omero_server_version | default('') | length > 0) and
              (omero_server_version != _omero_server_new_version) and
              (omero_server_version is version(
                _omero_server_new_version,
                omero_server_checkupgrade_comparator))
            )
          }}
  rescue:
    # For example, comparing 5.6.dev2 with 5.6.0-m1 leads to
    # '<' not supported between instances of 'str' and 'int'
    # Assume this is a dev or pre-release and upgrade
    # Ansible will exit 0 but show a failed task in the summary
    - name: Print upgrade error
      ansible.builtin.debug:
        msg: >-
          Error comparing current version
          ({{ omero_server_version | default('') }})
          and new version
          ({{ _omero_server_new_version }}), upgrading

    - name: Check upgrade failed
      ansible.builtin.set_fact:
        _omero_server_update_needed: true

- name: Print upgrade required message
  ansible.builtin.debug:
    msg: >-
      Upgrade needed: {{ omero_server_version | default('UNKNOWN') }} ->
      {{ omero_server_release }}
  when: _omero_server_update_needed

# If the OMERO.server symlink doesn't exist don't upgrade, this is a new
# installation
- name: Set upgrade flag
  ansible.builtin.set_fact:
    _omero_server_execute_upgrade: "{{
      omero_server_upgrade and
      _omero_server_update_needed and
      (omero_server_release != 'present') and
      omero_server_symlink_st.stat.exists }}"

# TODO: figure out dependencies
- name: Setup virtualenv3
  become: true
  ansible.builtin.pip:
    name: "pip>=21"
    state: present
    virtualenv: "{{ omero_server_virtualenv_basedir }}"
    virtualenv_command: /usr/local/bin/ome-python3-virtualenv

- name: Install requirements
  become: true
  ansible.builtin.pip:
    name: "{{ omero_server_python_requirements + omero_server_python_addons }}"
    state: present
    virtualenv: "{{ omero_server_virtualenv_basedir }}"
    virtualenv_command: /usr/local/bin/ome-python3-virtualenv
  notify:
    - Rewrite omero-server configuration
    - Restart omero-server

- name: Install omero
  become: true
  become_user: "{{ omero_server_system_user }}"
  ansible.builtin.command: >
    {{ omero_server_omego }}
    install
    {{ omero_server_omego_options }}
    {{ omero_server_omego_db_options }}
    --rootpass {{ omero_server_rootpassword | quote }}
  args:
    chdir: "{{ omero_server_basedir }}"
    creates: "{{ omero_server_basedir }}/{{ omero_server_symlink }}"
  environment: "{{ omero_server_omego_environment }}"
  notify:
    - Rewrite omero-server configuration
    - Restart omero-server

# Backup database

- name: Create omero backup directory
  become: true
  ansible.builtin.file:
    mode: "0700"
    owner: "{{ omero_server_system_user }}"
    path: "{{ omero_server_database_backupdir }}"
    state: directory
  when: >-
    (omero_server_database_backupdir | length > 0) and
    _omero_server_execute_upgrade
  tags:
    - molecule-idempotence-notest

- name: Backup database # noqa no-changed-when
  become: true
  become_user: "{{ omero_server_system_user }}"
  ansible.builtin.command: >
    {{ omero_server_omego }}
    db dump
    {{ omero_server_omego_db_backup_options }}
    --serverdir {{ omero_server_basedir }}/{{ omero_server_symlink }}
  args:
    chdir: "{{ omero_server_database_backupdir }}"
  environment: "{{ omero_server_omego_environment }}"
  when: >-
    (omero_server_database_backupdir | length > 0) and
    _omero_server_execute_upgrade
  tags:
    - molecule-idempotence-notest

# Upgrade
- name: Upgrade # noqa no-changed-when
  become: true
  become_user: "{{ omero_server_system_user }}"
  ansible.builtin.command: >
    {{ omero_server_omego }}
    install --upgrade
    {{ omero_server_omego_options }}
    {{ omero_server_omego_db_options }}
  args:
    chdir: "{{ omero_server_basedir }}"
  environment: "{{ omero_server_omego_environment }}"
  when: _omero_server_execute_upgrade
  notify:
    - Rewrite omero-server configuration
    - Restart omero-server
  tags:
    - molecule-idempotence-notest

- name: Delete OMERO.server/lib/python
  become: true
  ansible.builtin.file:
    path: "{{ omero_server_omerodir }}/lib/python"
    state: absent

# Remembering to set OMERODIR everywhere is prone to error
- name: Create bin directory for wrapper
  become: true
  ansible.builtin.file:
    path: "{{ omero_server_omerodir }}/bin/"
    state: directory
    mode: "0555"

- name: Create omero server wrapper
  become: true
  ansible.builtin.template:
    dest: "{{ omero_server_omero_command }}"
    src: bin-omero.j2
    mode: "0555"
  notify:
    - Rewrite omero-server configuration
    - Restart omero-server
  tags:
    - molecule-idempotence-notest

- name: Install openssl
  become: true
  ansible.builtin.package:
    name: openssl
    state: present
