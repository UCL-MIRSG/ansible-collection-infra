---
- name: >-
    Check if new postgres directory already exists
  ansible.builtin.stat:
    path: "{{ postgresql_upgrade_data_dir }}"
  register: postgresql_upgrade_new_data_dir

- name: >-
    Fail if new postgres data directory already exists
  ansible.builtin.fail:
    msg: >
      Cannot upgrade because the new postgres directory
      {{ postgresql_upgrade_data_dir }} already exists; this suggests an
      upgrade has already been attempted
  when: postgresql_upgrade_new_data_dir.stat.exists and postgresql_upgrade_new_data_dir.stat.isdir

- name: Back up PostgreSQL
  ansible.builtin.command: "{{ postgreql_upgrade_backup_script }}"
  become: true
  become_user: postgres
  changed_when: false

- name: Disable previous version of PostgreSQL - {{ postgreql_upgrade_current_version }}
  ansible.builtin.service:
    name: "postgresql-{{ postgreql_upgrade_current_version }}"
    state: stopped
    enabled: false

- name: Install new version of PostgreSQL - {{ postgreql_upgrade_new_version }}
  ansible.builtin.include_role:
    name: mirsg.infrastructure.postgresql
  vars:
    postgresql_version: "{{ postgreql_upgrade_new_version }}" # noqa var-naming[no-role-prefix]
    postgresql_create_database: false

- name: Ensure new postgres is not running
  ansible.builtin.service:
    name: "postgresql-{{ postgreql_upgrade_new_version }}"
    state: stopped

- name: Remove any previous upgrade output
  ansible.builtin.file:
    path: "{{ postgresql_upgrade_scripts_dir }}"
    state: absent

- name: >-
    Ensure directory for upgrade scripts exists -
    {{ postgresql_upgrade_scripts_dir }}
  ansible.builtin.file:
    path: "{{ postgresql_upgrade_scripts_dir }}"
    owner: "{{ postgresql_upgrade_postgresql_owner }}"
    group: "{{ postgresql_upgrade_postgresql_group }}"
    state: directory
    mode: "0700"

- name: Run PostgreSQL upgrade
  ansible.builtin.command:
    cmd: >
      /usr/pgsql-{{ postgreql_upgrade_new_version }}/bin/pg_upgrade
      -d /var/lib/pgsql/{{ postgreql_upgrade_current_version }}/data
      -D /var/lib/pgsql/{{ postgreql_upgrade_new_version }}/data
      -b /usr/pgsql-{{ postgreql_upgrade_current_version }}/bin
      -B /usr/pgsql-{{ postgreql_upgrade_new_version }}/bin
      -p 10094 -P 5432
    chdir: "{{ postgresql_upgrade_scripts_dir }}"
  become: true
  become_user: postgres
  changed_when: false

- name: Ensure new postgres is running - {{ postgreql_upgrade_new_version }}
  ansible.builtin.service:
    name: "postgresql-{{ postgreql_upgrade_new_version }}"
    state: started
    enabled: true

- name: Show suggested commands for removing old service
  ansible.builtin.debug:
    msg:
      - "The PostgreSQL {{ postgreql_upgrade_current_version }} service has been disabled \
        but you may wish to remove it using the following commands on the db server:"
      - "sudo yum remove postgresql{{ postgreql_upgrade_current_version }}-server"
      - "sudo yum remove postgresql{{ postgreql_upgrade_current_version }}-libs"
