---
- name:
    Ensure prometheus data directory exists - {{
    monitoring_server_prometheus.external_data_dir }}
  ansible.builtin.file:
    path: "{{ monitoring_server_prometheus.external_data_dir }}"
    owner: "{{ monitoring_server_owner }}"
    group: "{{ monitoring_server_group }}"
    state: directory
    mode: "0700"

- name: Copy server cert to prometheus bind mount
  ansible.builtin.copy:
    src: "{{ monitoring_server_certificate_cache_directory }}/ca.pem"
    dest: "{{ monitoring_server_prometheus.external_data_dir }}/ca.pem"
    owner: "{{ monitoring_server_owner }}"
    group: "{{ monitoring_server_group }}"
    mode: "0644"
  notify:
    - Restart prometheus

- name: Copy prometheus rules file
  ansible.builtin.copy:
    src: templates/prometheus_rules.yml.j2
    dest: "{{ monitoring_server_prometheus.external_data_dir }}/rules.yml"
    owner: "{{ monitoring_server_owner }}"
    group: "{{ monitoring_server_group }}"
    mode: "0644"
  notify:
    - Restart prometheus

- name: Copy prometheus config file
  ansible.builtin.template:
    src: templates/prometheus.yml.j2
    dest: "{{ monitoring_server_prometheus.external_data_dir }}/prometheus.yml"
    owner: root
    mode: "0644"
  notify:
    - Restart prometheus
  tags:
    - molecule-idempotence-notest

- name: Start prometheus container
  community.docker.docker_container:
    name: "{{ monitoring_server_prometheus.container_name }}"
    hostname: "{{ monitoring_server_prometheus.container_name }}"
    image: "{{ monitoring_server_prometheus.image }}"
    user: "{{ monitoring_server_uid }}:{{ monitoring_server_gid }}"
    state: started
    command:
      "{% for key in monitoring_server_prometheus.commandline_args %}--{{ key
      }}={{ monitoring_server_prometheus.commandline_args[key] }} {% endfor %}"
    networks:
      - name: monitor-net
    volumes:
      - "{{ monitoring_server_prometheus.external_data_dir }}:{{
        monitoring_server_prometheus.volume }}"
    restart_policy: always
